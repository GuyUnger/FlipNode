[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://dviyrmikcfgx8"]

[ext_resource type="Texture2D" uid="uid://b67qx0l61s731" path="res://demo/flipnote/dither.png" id="1_kvcpa"]

[sub_resource type="Shader" id="Shader_pp8rk"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D dither_texture : repeat_enable, filter_nearest;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

vec3 rgb2hsv(vec3 rgb) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));
	vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));
	
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 hsv2rgb(vec3 hsv) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);
	return hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);
}

void fragment() {
	float dither = texture(dither_texture, SCREEN_UV / SCREEN_PIXEL_SIZE / 4.0).r;
	
	vec3 rgb = texture(screen_texture, SCREEN_UV).rgb;
	vec3 hsv = rgb2hsv(rgb);
	
	//float dither_s = clamp(floor((hsv.y * 2.0 + dither - 1.0) * 4.0) / 4.0, 0.0, 1.0);
	//float b = (hsv.z + (1.0 - hsv.y)) * 0.5;
	//float b = mix(hsv.z, 1.0 - hsv.y, smoothstep(0.4, 0.6, hsv.y));
	
	float white_value = (1.0 - hsv.y) * hsv.z;
	float black_value = 1.0 - hsv.z;
	
	if (white_value > black_value) {
		black_value = 0.0;
	} else {
		white_value = 0.0;
	}
	
	float dither_white = smoothstep(white_value+0.001, white_value, dither);
	float dither_black = smoothstep(black_value+0.001, black_value, dither);
	
	vec3 color = hsv2rgb(vec3(floor(hsv.x * 8.0) / 8.0, (hsv.y * 3.0) / 3.0, 1.0));
	
	color = mix(color, vec3(1.0), dither_white);
	color = mix(color, vec3(0.0), dither_black);
	
	COLOR.rgb = color;
}"

[resource]
shader = SubResource("Shader_pp8rk")
shader_parameter/dither_texture = ExtResource("1_kvcpa")
