[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://8hs3p3kogtk3"]

[sub_resource type="Shader" id="Shader_cmcne"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;
varying vec4 modulate;

global uniform sampler2D goolash_boil_noise : repeat_enable;
global uniform float goolash_frame;

void vertex() {
	modulate = COLOR;
}

//void fragment() {
	//COLOR.rgb = modulate.rgb;
	//float a = 0.0;
	//
	//vec2 uv = SCREEN_UV;
	//
	//vec2 noise_uv = UV / 6.0;
	//
	//float frame = floor(goulash_frame / 4.0);
	//noise_uv += vec2(frame * 0.1, frame * PI);
	//uv += (texture(goulash_boil_noise, noise_uv).rg - 0.5) * 0.004;
	//
	//a = texture(screen_texture, uv).r;
	//
	//COLOR.a = a * modulate.a;
//}

void fragment() {
	COLOR.rgb = modulate.rgb;
	float a = 0.0;
	
	vec2 uv = SCREEN_UV;
	
	vec2 noise_uv = UV / 6.0;
	
	float frame = floor(goolash_frame / 4.0);
	noise_uv += vec2(frame * 0.1, frame * PI);
	uv += (texture(goolash_boil_noise, noise_uv).rg - 0.5) * 0.004;
	
	a += texture(screen_texture, uv).r * 2.0;
	for (float i = 0.0; i < 1.0; i += 1.0 / 3.0) {
		a += texture(screen_texture, uv + vec2(sin(i * TAU + 0.8 + frame), cos(i * TAU + 0.8 + frame)) * 1.5 * SCREEN_PIXEL_SIZE).r;
		a += texture(screen_texture, uv + vec2(sin(i * TAU + frame), cos(i * TAU + frame)) * 1.0 * SCREEN_PIXEL_SIZE).r;
	}
	a = smoothstep(0.2, 0.6, a / 6.0);
	
	//COLOR.rgb = mix(vec3(0.0), COLOR.rgb, a);
	
	COLOR.a = a * modulate.a;
}"
metadata/_edit_res_path = "res://addons/goulash/brush_stroke_material.tres::Shader_cmcne"

[resource]
shader = SubResource("Shader_cmcne")
